import React from "react"
import { useSearchParams } from "react-router-dom"
import axios, { AxiosResponse } from "axios"
import { nanoid } from "nanoid"
import { currentInvidiousInstance } from "../data/invidious"
import {getVideoThumbnailUrl} from "../utils/index"

type InvidiousSearchResponseVideo = {
    type: "video",
    title: string,
    videoId: string,
    author: string,
    authorId: string,
    authorUrl: string,
    videoThumbnails: [
        {
            quality: string,
            url: string,
            width: number,
            height: number
        }
    ],
    description: string,
    descriptionHtml: string,
    viewCount: number,
    published: number,
    publishedText: string,
    lengthSeconds: number,
    liveNow: boolean,
    paid: boolean,
    premium: boolean
}

type InvidiousSearchResponsePlaylist = {
    type: "playlist",
    title: string,
    playlistId: string,
    playlistThumbnail: string,
    author: string,
    authorId: string,
    authorUrl: string,
    authorVerified: boolean,

    videoCount: number,
    videos: [
        {
            title: string,
            videoId: string,
            lengthSeconds: number,
            videoThumbnails: [
                {
                    quality: string,
                    url: string,
                    width: number,
                    height: number
                }
            ]
        }
    ]
}

type InvidiousSearchResponseChannel = {
    type: "channel",
    author: string,
    authorId: string,
    authorUrl: string,

    authorThumbnails: [
        {
            url: string,
            width: number,
            height: number
        }
    ],
    autoGenerated: boolean
    subCount: number,
    videoCount: number,
    description: string,
    descriptionHtml: string
}

type InvidiousSearchResponse = [
    InvidiousSearchResponseVideo | InvidiousSearchResponsePlaylist | InvidiousSearchResponseChannel
];


function VideoItem(props: InvidiousSearchResponseVideo) {
    // const router = useRouter()
    const [, setSearchParams] = useSearchParams()

    const handleImageClick = () => {
        // router.push(`/watch?v=${props.videoId}`)
        setSearchParams({
            type: "watch",
            v: props.videoId
        })
    }

    return (
        <div
            key={nanoid()}
            className="flex flex-row gap-2"
        >
            <img
                src={getVideoThumbnailUrl(props.videoThumbnails)}
                alt={""}
                width={16 * 30}
                height={9 * 30}
                className="rounded-2xl"
                onContextMenu={(ev: React.MouseEvent<HTMLImageElement>) => { ev.preventDefault() }}
                onClick={handleImageClick}
            />
            <div className="flex flex-col py-1 select-none">
                <div>
                    <span
                        className="font-semibold"
                    >{props.title}</span>
                </div>
                <div className="">
                    <span className="text-xs"
                    >{props.viewCount} views - {props.published}</span>
                </div>
                <div className="">
                    <span
                        className="text-sm font-normal"
                    >{props.author}</span>
                </div>
                <div className="">
                    <span
                        className="text-sm font-normal"
                    >{props.description}</span>

                </div>
            </div>
        </div>
    )

}



export default function ResultsPage() {
    const [searchParams] = useSearchParams()
    const searchQueryString: string = React.useMemo(() => (
        searchParams.get("search_query") || ""
    ), [searchParams])

    const [searchResultList, setSearchResultList] = React.useState<InvidiousSearchResponse | null>(null)


    const fetchSearchResults = async () => {
        try {
            // `https://${currentInvidiousInstance}/api/v1/search?q=${queryString}`
            const res: AxiosResponse = await axios.get(`https://${currentInvidiousInstance}/api/v1/search`, {
                params: {
                    q: searchQueryString
                }
            })

            // const dataObj: { [key: string]: InvidiousSearchResponse } = res.data
            const dataObj: { [key: string]: any } = res.data
            // console.log("DataObj ", dataObj)

            const dataArr: any = Object.keys(dataObj).map(key => dataObj[key]);
            // console.log("DataArr ", dataArr)
            setSearchResultList(dataArr)

        } catch (err: any) {
            // console.error(err)
            console.error("failed to connect to api server")
        }

    }

    React.useEffect(() => {
        fetchSearchResults()

    }, [searchQueryString])

    return (
        <main className="pt-12 w-screen flex flex-row justify-center items-center">
            <div className="flex flex-col gap-2 pt-2">
                {

                    searchResultList ? searchResultList.filter((searchResult) => searchResult.type === "video").map((searchResult) => {
                        switch (searchResult.type) {
                            case "video":
                                return (
                                    <VideoItem key={nanoid()} {...searchResult} />
                                )
                            default:
                                return (
                                    <div> No Match </div>
                                )
                        }
                    }) : (
                        <div className="mt-4">
                            <span
                            >Search Results will show up here</span>
                        </div>

                    )

                }
            </div>
        </main>
    )

}
